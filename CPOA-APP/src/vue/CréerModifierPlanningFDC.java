/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import donnée.Bdd;
import java.net.URL;
import java.sql.Connection;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.UIManager;
import métier.Categories;
import métier.Date;
import métier.Film;
import métier.Horaire;
import métier.MultilineTableCellRenderer;
import métier.Planning;
import métier.Salle;
import métier.Seance;

/**
 *
 * @author etien
 */
public class CréerModifierPlanningFDC extends javax.swing.JFrame {
    private static Connection conn = Bdd.coBdd();
    
    private static Object[][] PlanningTab = new Object[13][6];
    private static String[] nomColPlanning = {"Jours", "Salle 1", "Salle 2","Salle 3","Salle 4","Salle 5"};
    
    private static int idCategoriePlanningOuIdPlanning;
    private static boolean etatCreation = true;
    private static int idPlanning;
    
    private static int NbColonneFA = 3;
    private static Object[][] film = null;
    private static String [] nomColFilm = { "Numéro", "Titre", "Date de sortie"};
    
    private static boolean valueLendemainCB = false;
    private static String[][] tabSalle;
    private static String[][] tabSalle2 = Salle.recupSalle();
    private static String[][] tabHoraire = Horaire.recupHoraire();
    private static String[][] tabDate = Date.recupDate();
    private static String[][] tabSeance = new String[100][6];
    private static String[][] tabFilm = Film.recupFilm();
    
    private static int idFilmSel = 0;
    private static int idSalleSélectionée = -1 ;
    private static int idHoraireSélectionée = 0;
    private static int idDateSélectionée = 0;
    
    /**
     * Creates new form CréerUnPlanningFDC
     */
    public CréerModifierPlanningFDC() {
        for(int i=1 ;i < tabSalle2.length;i++){
            nomColPlanning[i] = tabSalle2[i-1][0];
        }
        for(int i=0;i < tabDate.length;i++){
            PlanningTab[i][0] = tabDate[i][0];
        }
        
        initComponents();
        URL iconURL = getClass().getResource("/vue/LogoFDC.png");
        ImageIcon icon = new ImageIcon(iconURL);
        this.setIconImage(icon.getImage());
        jDialogAjouterSéance.setIconImage(icon.getImage());
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        
        if(idCategoriePlanningOuIdPlanning == 3){
            jLabelNomPlanning.setText(Categories.getNomCat(idCategoriePlanningOuIdPlanning) + " et HC");
        }else{
            jLabelNomPlanning.setText(Categories.getNomCat(idCategoriePlanningOuIdPlanning));
        }
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogAjouterSéance = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabelNomCat = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        bValiderSeance = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabelAletreUserSaisi = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        bAjouterSéance = new javax.swing.JToggleButton();
        jLabelNomPlanning = new javax.swing.JLabel();

        jDialogAjouterSéance.setTitle("Création d'une séance");
        jDialogAjouterSéance.setSize(new java.awt.Dimension(1152, 644));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Création d'une séance : ");

        jTable2.setAutoCreateRowSorter(true);
        jTable2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTable2.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            film,
            nomColFilm) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable2.setGridColor(new java.awt.Color(51, 153, 255));
        jTable2.setIntercellSpacing(new java.awt.Dimension(0, 0));
        jTable2.setRowHeight(30);
        jTable2.setSelectionBackground(new java.awt.Color(130, 244, 15));
        jTable2.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabelNomCat.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel2.setText("Date :");

        jLabel3.setText("Salle :");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Horaire :");

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        bValiderSeance.setText("Valider");
        bValiderSeance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bValiderSeanceActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Séance du lendemain :           ");
        jCheckBox1.setFocusCycleRoot(true);
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabelAletreUserSaisi.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelAletreUserSaisi.setForeground(new java.awt.Color(255, 51, 51));

        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogAjouterSéanceLayout = new javax.swing.GroupLayout(jDialogAjouterSéance.getContentPane());
        jDialogAjouterSéance.getContentPane().setLayout(jDialogAjouterSéanceLayout);
        jDialogAjouterSéanceLayout.setHorizontalGroup(
            jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogAjouterSéanceLayout.createSequentialGroup()
                .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDialogAjouterSéanceLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialogAjouterSéanceLayout.createSequentialGroup()
                        .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jDialogAjouterSéanceLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)))
                            .addGroup(jDialogAjouterSéanceLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2)))
                        .addGap(37, 37, 37)
                        .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox3, 0, 190, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(74, 74, 74))
            .addGroup(jDialogAjouterSéanceLayout.createSequentialGroup()
                .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogAjouterSéanceLayout.createSequentialGroup()
                        .addGap(679, 679, 679)
                        .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogAjouterSéanceLayout.createSequentialGroup()
                                .addComponent(bValiderSeance)
                                .addGap(91, 91, 91))
                            .addComponent(jLabelAletreUserSaisi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jDialogAjouterSéanceLayout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelNomCat, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDialogAjouterSéanceLayout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(499, Short.MAX_VALUE)))
        );
        jDialogAjouterSéanceLayout.setVerticalGroup(
            jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogAjouterSéanceLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabelNomCat, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 170, Short.MAX_VALUE)
                .addComponent(jCheckBox1)
                .addGap(32, 32, 32)
                .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabelAletreUserSaisi, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(bValiderSeance)
                .addGap(89, 89, 89))
            .addGroup(jDialogAjouterSéanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDialogAjouterSéanceLayout.createSequentialGroup()
                    .addGap(119, 119, 119)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(66, Short.MAX_VALUE)))
        );

        int j = 0;
        if(etatCreation==true){
            tabSalle = Salle.recupSalle(idCategoriePlanningOuIdPlanning, valueLendemainCB);
        }
        else{
            tabSalle = Salle.recupSalle(Planning.getIdCatPlanning(idPlanning), valueLendemainCB);
        }
        while (tabSalle[j][1] != null && j < tabSalle.length){
            jComboBox1.addItem(tabSalle[j][0]);
            j++;
        }
        int i = 0;
        String[][] tabHoraires = Horaire.recupHoraire();
        while (tabHoraires[i][1] != null && i < tabHoraires.length){
            jComboBox2.addItem(tabHoraires[i][0] + " (" + tabHoraires[i][2] + ")");
            i++;
        }
        int j2 = 0;
        tabDate = Date.recupDate();
        while (tabDate[j2][1] != null && j < tabDate.length){
            jComboBox3.addItem(tabDate[j2][0]);
            j2++;
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Planning du festival");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        métier.MultilineTableCellRenderer renderer = new MultilineTableCellRenderer();
        jTable1.setDefaultRenderer(String.class, renderer);
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            PlanningTab,
            nomColPlanning) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            boolean[] canEdit = new boolean [] {
                false,false,false,false,false,false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(51, 153, 255));
        jTable1.setIntercellSpacing(new java.awt.Dimension(0, 0));
        jTable1.setRowHeight(30);
        jTable1.setSelectionBackground(new java.awt.Color(255, 204, 102));
        jTable1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(jTable1);

        bAjouterSéance.setText("Ajouter une séance");
        bAjouterSéance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAjouterSéanceActionPerformed(evt);
            }
        });

        jLabelNomPlanning.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bAjouterSéance)
                .addGap(61, 61, 61))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1839, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelNomPlanning, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jLabelNomPlanning, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 823, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(bAjouterSéance)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAjouterSéanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAjouterSéanceActionPerformed
        jLabelAletreUserSaisi.setText("");
        if(idCategoriePlanningOuIdPlanning == 3){
            jLabelNomCat.setText(Categories.getNomCat(idCategoriePlanningOuIdPlanning) + " et HC");
        }else{
            jLabelNomCat.setText(Categories.getNomCat(idCategoriePlanningOuIdPlanning));
        }
        jDialogAjouterSéance.setVisible(true);
    }//GEN-LAST:event_bAjouterSéanceActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        valueLendemainCB = jCheckBox1.isSelected();
        int j = 0;
        if(etatCreation==true){
            tabSalle = Salle.recupSalle(idCategoriePlanningOuIdPlanning, valueLendemainCB);
        }
        else{
            tabSalle = Salle.recupSalle(Planning.getIdCatPlanning(idPlanning), valueLendemainCB);
        }
        jComboBox1.removeAllItems();
        while (tabSalle[j][1] != null && j < tabSalle.length){
            jComboBox1.addItem(tabSalle[j][0]);
            j++;
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if(jComboBox1.getSelectedIndex()!= -1){
            idSalleSélectionée = Integer.valueOf(tabSalle[jComboBox1.getSelectedIndex()][1]);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        idFilmSel = (int) film[jTable2.getSelectedRow()][0];
        int categorie = (int)film[jTable2.getSelectedRow()][3];
        if((categorie==1)||(categorie==3)){
            jCheckBox1.setVisible(true);
        }
        else{
            jCheckBox1.setVisible(false);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void bValiderSeanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bValiderSeanceActionPerformed
        int etat =-10;
        if (idFilmSel != 0){
            if(idDateSélectionée != 0){
                if(idSalleSélectionée != 0){
                    if(idHoraireSélectionée != 0){ 
                        if(etatCreation==true){
                            etat = Seance.CréationSéance(Planning.getIdPlanning(idCategoriePlanningOuIdPlanning), idSalleSélectionée, idFilmSel, idHoraireSélectionée, idCategoriePlanningOuIdPlanning, idDateSélectionée, valueLendemainCB);
                        }
                        else{
                            etat = Seance.CréationSéance(idPlanning, idSalleSélectionée, idFilmSel, idHoraireSélectionée, Planning.getIdCatPlanning(idPlanning), idDateSélectionée, valueLendemainCB);
                        }
                        
                        if(etat==0){
                            jDialogAjouterSéance.dispose();

                            clearTable(jTable1);
                            majEDT();
                        }
                        else if (etat==-1){
                            jLabelAletreUserSaisi.setText("Une séance est déjà sur cet horaire !");
                        }
                        else if (etat==-2){
                            jLabelAletreUserSaisi.setText("Ce jury a dépassé son nombre de longs métrages pour la journée !");
                        }
                        else if (etat==-3){
                            jLabelAletreUserSaisi.setText("Ce jury a dépassé son nombre de un certain regard pour la journée !");
                        }
                    }else{
                        jLabelAletreUserSaisi.setText("Vous devez sélectioner un horaire !");
                    }
                }else{
                    jLabelAletreUserSaisi.setText("Vous devez sélectioner une salle !");
                }  
            }else{
                jLabelAletreUserSaisi.setText("Vous devez saisir une date !");
            }
        }else{
            jLabelAletreUserSaisi.setText("Vous devez sélectioner un film dans la liste !");
        
        }
        
        
    }//GEN-LAST:event_bValiderSeanceActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        idHoraireSélectionée = Integer.valueOf(tabHoraire[jComboBox2.getSelectedIndex()][1]);
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        idDateSélectionée = Integer.valueOf(tabDate[jComboBox3.getSelectedIndex()][1]);
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        valueLendemainCB = false;
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        if(etatCreation==false){
            majEDT();
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[], int idCategoriePlanningOuIdPlanning, boolean création) {
       CréerModifierPlanningFDC.idCategoriePlanningOuIdPlanning = idCategoriePlanningOuIdPlanning;
       CréerModifierPlanningFDC.etatCreation = création;
       
       if(etatCreation==true){
           idPlanning=Planning.getIdPlanning(idCategoriePlanningOuIdPlanning);
           film = Film.DonnéeFilmCat(idCategoriePlanningOuIdPlanning);
           tabSalle = Salle.recupSalle(idCategoriePlanningOuIdPlanning, valueLendemainCB);
       }
       else{
           idPlanning=idCategoriePlanningOuIdPlanning;
           film = Film.DonnéeFilmCat(Planning.getIdCatPlanning(idPlanning));
           tabSalle = Salle.recupSalle(Planning.getIdCatPlanning(idPlanning), valueLendemainCB);
           

       }
       
       
       try {
            UIManager.setLookAndFeel( new FlatDarkLaf() );
        } catch( Exception ex ) {
            System.err.println( "Erreur d'inisialisation de LaF" );
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CréerModifierPlanningFDC().setVisible(true);
            }
        });
    }
    
    public void majEDT(){
        tabSeance = Seance.getSeancesFormPlanning(idPlanning);
        
        int indexHoraire=0, indexFilm=0, indexDate=0, indexSalle=0;
        for(int i=0; i < tabSeance.length-1; i++){
            //System.out.println("----------------------------" + i);
            
            
            for (int j = 0; j < tabDate.length; j++) {
                if(tabSeance[i][1].equals(tabDate[j][1])){
                    indexDate = j;
                    //System.out.println(tabDate[indexDate][0]);
                    break;
                }
            }
            for (int j = 0; j < tabSalle.length; j++) {
                if(tabSeance[i][4].equals(tabSalle2[j][1])){
                    indexSalle = j;
                    //System.out.println(tabSalle2[indexSalle][0]);
                    break;
                }
            }
            for (int j = 0; j < tabHoraire.length; j++) {
                if(tabSeance[i][2].equals(tabHoraire[j][1])){
                    indexHoraire = j;
                    //System.out.println(tabHoraire[indexHoraire][0]);
                    break;
                }
            }
            for (int j = 0; j < tabFilm.length; j++) {
                if(tabSeance[i][5].equals(tabFilm[j][1])){
                    indexFilm = j;
                    //System.out.println(tabFilm[indexFilm][0]);
                    break;
                }
            }

            if(jTable1.getValueAt(indexDate, indexSalle+1) == null){
               
                String film = tabHoraire[indexHoraire][0] +" "+ tabFilm[indexFilm][0];
                
                //System.out.println(film);
                //String[] newRow = {film};
                jTable1.setValueAt(film, indexDate, indexSalle+1);

                
            } else{
               String old = (String) jTable1.getValueAt(indexDate, indexSalle+1);
               String film = tabHoraire[indexHoraire][0] +" "+ tabFilm[indexFilm][0];
               //System.out.println(old);
               jTable1.setValueAt(old + "\n" + film, indexDate, indexSalle+1);

            } 
        }
    }
    
    public static void clearTable(final JTable jtable) {
        for (int i = 0; i < jtable.getRowCount(); i++)
           for(int j = 1; j < jtable.getColumnCount(); j++) {
               jtable.setValueAt(null, i, j);
           }
    }

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton bAjouterSéance;
    private javax.swing.JButton bValiderSeance;
    private static javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JDialog jDialogAjouterSéance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelAletreUserSaisi;
    private javax.swing.JLabel jLabelNomCat;
    private static javax.swing.JLabel jLabelNomPlanning;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
